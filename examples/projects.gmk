# GNU TOOLCHAIN Configuration

GNU =
CC  = ${GNU}arm-none-eabi-gcc
AS  = ${GNU}arm-none-eabi-as
LN  = ${GNU}arm-none-eabi-gcc
HEX = ${GNU}arm-none-eabi-objcopy -O ihex
BIN = ${GNU}arm-none-eabi-objcopy -O binary

# OpenOCD
OPENOCD := openocd

LMICDIR  = ../../lmic
TARGETDIR  = ../../target/stm32
TOOLSDIR   = ../../tools
BUILDDIR = build

LINKER_SCRIPT :=  $(TARGETDIR)/STM32L152VB_FLASH.ld

CMSIS_INC = $(TARGETDIR)/CMSIS/Include
define CMSIS_MSG
ERROR: CMSIS Library missing: $(CMSIS_INC)
## CMSIS: Cortex Microcontroller Software Interface Standard
## CMSIS Library can be obtained from the STM32L1xx standard peripherals library
## Download URL: www.st.com/web/catalog/tools/FM147/CL1794/SC961/SS1743/PF257913
endef
ifeq (,$(wildcard $(CMSIS_INC)))
$(error $(CMSIS_MSG))
endif

CPU    = -mcpu=cortex-m3 -mthumb
CCOPTS = $(CPU) -c -std=gnu99  -g
CCOPTS += -fno-common -fmessage-length=0 -fno-builtin -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer -MMD -MP
ASOPTS = $(CPU)
LNOPTS = -g $(CPU) -Wl,--gc-sections -T$(LINKER_SCRIPT)

CCOPTS += -I$(CMSIS_INC)
ASOPTS += -I$(CMSIS_INC)

# LMIC CONFIG
LMICCFG += -DLMIC_CMDLINE_CONFIG -DSTM32L1XX_MD -DCFG_DEBUG -DLMIC_EU686 -DCFG_wimod_board -DLMIC_SX1272 -DCFG_lmic_clib

# RULES
SRCS = $(notdir $(wildcard ${LMICDIR}/*.c ${TARGETDIR}/*.c ${TARGETDIR}/*.s *.c))
OBJS = $(patsubst %, ${BUILDDIR}/%.o, $(basename ${SRCS}))

VPATH = ${LMICDIR} ${TARGETDIR} .

${BUILDDIR}/%.o: %.c | ${BUILDDIR}
	${CC} ${CCOPTS} ${LMICCFG} -I${LMICDIR} -I${TARGETDIR} $< -o$@

${BUILDDIR}/%.o: %.s | ${BUILDDIR}
	${AS} ${ASOPTS} $< -o $@

${BUILDDIR}/%.out: ${OBJS}
	${LN} ${LNOPTS} -o $@ $^

${BUILDDIR}/%.hex: ${BUILDDIR}/%.out
	${HEX} $< ${HEXOPTS} $@

${BUILDDIR}/%.bin: ${BUILDDIR}/%.out
	${BIN} $< ${HEXOPTS} $@

all: ${BUILDDIR}/$(notdir ${CURDIR}).bin ${BUILDDIR}/$(notdir ${CURDIR}).hex

clean:
	rm -rf ${BUILDDIR} Debug RTE settings *.dep *.bak *.sfr *.map *.uvguix.*

load: ${BUILDDIR}/$(notdir ${CURDIR}).bin
	$(OPENOCD) -f $(TOOLSDIR)/openocd/wimod.cfg  -f $(TOOLSDIR)/openocd/flash.cfg -c "flash_binary $<"

${BUILDDIR}:
	mkdir $@

.PHONY: all clean

.SECONDARY:
